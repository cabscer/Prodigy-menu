function _0x4b558e() {
  const _0x1ab3b7 = _0x524bf0 => {
    if (!_0x524bf0) {
      return null;
    }
    if (_0x524bf0 instanceof Map || typeof _0x524bf0.entries === "function" && typeof _0x524bf0.get === "function") {
      for (const [, _0x113e41] of _0x524bf0.entries()) if (_0x113e41?.[0]?.["cache"]?.['ct'] !== undefined) {
        return _0x113e41[0];
      }
    } else {
      for (const _0x4bd9f8 of Object.keys(_0x524bf0)) {
        const _0x592f78 = _0x524bf0[_0x4bd9f8];
        if (_0x592f78?.[0]?.["cache"]?.['ct'] !== undefined) {
          return _0x592f78[0];
        }
      }
    }
    return null;
  };
  try {
    const _0x567e6d = Boot?.["prototype"]?.['game']?.['_state']?.["_current"];
    if (_0x567e6d) {
      const _0x5a6f95 = _0x567e6d._loggedInPlayerDataProvider;
      if (_0x5a6f95 && _0x5a6f95._player) {
        return _0x5a6f95._player;
      }
    }
  } catch (_0x74e0bf) {}
  try {
    const _0x582ec2 = Boot?.["prototype"]?.["game"]?.["state"]?.["_current"]?.["_currentScene"]?.['container']?.["sourceContainer"]?.["_bindingDictionary"]?.['_map'];
    const _0x1d7527 = _0x1ab3b7(_0x582ec2);
    if (_0x1d7527 && _0x1d7527.cache && _0x1d7527.cache.ct && _0x1d7527.cache.ct._playerDataProvider && _0x1d7527.cache.ct._playerDataProvider._player) {
      return _0x1d7527.cache.ct._playerDataProvider._player;
    }
  } catch (_0x3d143c) {}
  return null;
}
(function _0x27f0f5() {
  const _0x18584d = function () {
    let _0x12f8b0 = true;
    return function (_0x436f6c, _0x4dfd92) {
      const _0x4e582d = _0x12f8b0 ? function () {
        if (_0x4dfd92) {
          const _0x33760a = _0x4dfd92.apply(_0x436f6c, arguments);
          _0x4dfd92 = null;
          return _0x33760a;
        }
      } : function () {};
      _0x12f8b0 = false;
      return _0x4e582d;
    };
  }();
  const _0x3b89f4 = _0x18584d(this, function () {
    return _0x3b89f4.toString().search("(((.+)+)+)+$").toString().constructor(_0x3b89f4).search("(((.+)+)+)+$");
  });
  _0x3b89f4();
  const _0x48d86a = function () {
    let _0x1a1035 = true;
    return function (_0x4c7efc, _0x1c9227) {
      const _0x5a51fc = _0x1a1035 ? function () {
        if (_0x1c9227) {
          const _0x8b5004 = _0x1c9227.apply(_0x4c7efc, arguments);
          _0x1c9227 = null;
          return _0x8b5004;
        }
      } : function () {};
      _0x1a1035 = false;
      return _0x5a51fc;
    };
  }();
  const _0x1bd953 = _0x48d86a(this, function () {
    const _0x15ee62 = function () {
      let _0x5004a1;
      try {
        _0x5004a1 = Function("return (function() {}.constructor(\"return this\")( ));")();
      } catch (_0x57b3ea) {
        _0x5004a1 = window;
      }
      return _0x5004a1;
    };
    const _0x3c00a7 = _0x15ee62();
    const _0x3fb322 = _0x3c00a7.console = _0x3c00a7.console || {};
    const _0x5d5cf5 = ["log", "warn", "info", "error", "exception", "table", "trace"];
    for (let _0x4f9928 = 0; _0x4f9928 < _0x5d5cf5.length; _0x4f9928++) {
      const _0x429277 = _0x48d86a.constructor.prototype.bind(_0x48d86a);
      const _0xd26566 = _0x5d5cf5[_0x4f9928];
      const _0x2aa321 = _0x3fb322[_0xd26566] || _0x429277;
      _0x429277.__proto__ = _0x48d86a.bind(_0x48d86a);
      _0x429277.toString = _0x2aa321.toString.bind(_0x2aa321);
      _0x3fb322[_0xd26566] = _0x429277;
    }
  });
  _0x1bd953();
  let _0x439f9a = NaN;
  try {
    const _0x59bdb6 = prompt("How much gold do you want?");
    if (_0x59bdb6 != null) {
      _0x439f9a = parseInt(_0x59bdb6.replaceAll(',', ''), 10);
    }
  } catch (_0x4593c8) {
    _0x439f9a = NaN;
  }
  if (!Number.isNaN(_0x439f9a) && Number.isFinite(_0x439f9a)) {
    const _0x127e1e = Math.min(_0x439f9a, 10000000);
    if (_0x439f9a > 100000000) {
      alert("100,000,000 is the maximum amount for gold, setting gold to 100,000,000! Please note that setting to 10,000,000 is still a bad idea since the game will refresh. Once you get gold then the game will refresh, you can use this script again and set the gold amount to a lower amount like 1,000,000.");
    }
    const _0x5225c6 = _0x4b558e();
    if (!_0x5225c6) {
      alert("Player object not found.");
      return;
    }
    _0x5225c6.data = _0x5225c6.data || {};
    _0x5225c6.data.gold = _0x127e1e;
    if (typeof _0x5225c6.addWin === "function") {
      _0x5225c6.addWin();
    } else {
      if (typeof _0x5225c6.update === "function") {
        _0x5225c6.update();
      }
    }
  } else {
    alert("The answer you have responded with is not a number!");
  }
})();
