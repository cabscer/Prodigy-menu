var ui = document.createElement('div');
ui.style.cssText = 'position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);padding:20px;background:#fff;border:1px solid #ccc;border-radius:5px;box-shadow:0 4px 8px rgba(0,0,0,0.2);z-index:1001;';
var title = document.createElement('h3');
title.textContent = 'Set Player Level';
ui.appendChild(title);
var input = document.createElement('input');
input.type = 'number';
input.min = '1';
input.max = '1000';
input.style.cssText = 'width:100%;padding:8px;border:1px solid #ccc;border-radius:4px;margin-bottom:10px;';
ui.appendChild(input);
var submit = document.createElement('button');
submit.textContent = 'Set Level';
submit.style.cssText = 'padding:10px 15px;background:green;color:white;border:none;border-radius:4px;cursor:pointer;';
submit.onclick = function() {
    var level = parseInt(input.value);
    if (isNaN(level) || level < 1 || level > 1000) {
        alert("Enter a valid number (1-1000).");
        return;
    }

    // Function to set the player level
    function setLevel(lvl) {
        var player = Boot.prototype.game._state._current.user.source;
        var level_value = lvl;

        if (level_value === 1) {
            player.data.stars = 0;
            player.data.level = 1;
            player.getLevel = () => { return 1 };
            Boot.prototype.game._state._current.user.source.data.level = level_value;
            Boot.prototype.game._state._current.user.source.getLevel = () => { return level_value };
            return;
        }

        var i = level_value - 2;
        var xpConstant = 1.042;

        player.data.stars = Math.round((1 - Math.pow(xpConstant, i)) / (1 - xpConstant) * 20 + 10);
        player.data.level = +level_value;

        Boot.prototype.game._state._current.user.source.data.level = level_value;
        Boot.prototype.game._state._current.user.source.getLevel = () => { return level_value };
    }

    // Apply level changes
    setLevel(level);
    var source = Boot.prototype.game._state._current.user.source;
    source.data.stars += eval(source.getStarsToLevel()); // Update stars
    source.processStars();
    source.saveEnabled = true;
    source.forceSaveCharacter();
    source.appearanceChanged = true;
    document.body.removeChild(ui);
};
ui.appendChild(submit);
var cancel = document.createElement('button');
cancel.textContent = 'Cancel';
cancel.style.cssText = 'padding:10px 15px;background:red;color:white;border:none;border-radius:4px;cursor:pointer;margin-left:10px;';
cancel.onclick = function() {
    document.body.removeChild(ui);
};
ui.appendChild(cancel);
document.body.appendChild(ui);
